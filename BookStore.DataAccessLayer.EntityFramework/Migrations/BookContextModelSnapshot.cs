// <auto-generated />
using System;
using BookStore.DataAccessLayer.EntityFramework;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace BookStore.DataAccessLayer.EntityFramework.Migrations
{
    [DbContext(typeof(BookContext))]
    partial class BookContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("BookStore.DataAccess.EntityFramework.Entities.Admin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Email");

                    b.Property<string>("Password");

                    b.HasKey("ID");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("BookStore.DataAccess.EntityFramework.Entities.Author", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Authors");
                });

            modelBuilder.Entity("BookStore.DataAccess.EntityFramework.Entities.AuthorBook", b =>
                {
                    b.Property<int>("BookID");

                    b.Property<int>("AuthorID");

                    b.Property<int>("ID");

                    b.HasKey("BookID", "AuthorID");

                    b.HasAlternateKey("AuthorID", "BookID");

                    b.ToTable("AuthorBooks");
                });

            modelBuilder.Entity("BookStore.DataAccess.EntityFramework.Entities.Basket", b =>
                {
                    b.Property<int>("BookID");

                    b.Property<int>("UserID");

                    b.Property<int>("ID");

                    b.HasKey("BookID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserBaskets");
                });

            modelBuilder.Entity("BookStore.DataAccess.EntityFramework.Entities.Book", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal>("Price");

                    b.Property<DateTime>("ReleaseDate");

                    b.Property<string>("Title");

                    b.HasKey("ID");

                    b.ToTable("Books");
                });

            modelBuilder.Entity("BookStore.DataAccess.EntityFramework.Entities.Genre", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.HasKey("ID");

                    b.ToTable("Genres");
                });

            modelBuilder.Entity("BookStore.DataAccess.EntityFramework.Entities.GenreBook", b =>
                {
                    b.Property<int>("BookID");

                    b.Property<int>("GenreID");

                    b.Property<int>("ID");

                    b.HasKey("BookID", "GenreID");

                    b.HasIndex("GenreID");

                    b.ToTable("GenreBooks");
                });

            modelBuilder.Entity("BookStore.DataAccess.EntityFramework.Entities.User", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<bool>("Confirmed");

                    b.Property<string>("Email");

                    b.Property<string>("Password");

                    b.HasKey("ID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("BookStore.DataAccess.EntityFramework.Entities.UserBook", b =>
                {
                    b.Property<int>("BookID");

                    b.Property<int>("UserID");

                    b.Property<int>("ID");

                    b.HasKey("BookID", "UserID");

                    b.HasIndex("UserID");

                    b.ToTable("UserBooks");
                });

            modelBuilder.Entity("BookStore.DataAccess.EntityFramework.Entities.AuthorBook", b =>
                {
                    b.HasOne("BookStore.DataAccess.EntityFramework.Entities.Author", "Author")
                        .WithMany("AuthorBook")
                        .HasForeignKey("AuthorID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookStore.DataAccess.EntityFramework.Entities.Book", "Book")
                        .WithMany("AuthorBook")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.DataAccess.EntityFramework.Entities.Basket", b =>
                {
                    b.HasOne("BookStore.DataAccess.EntityFramework.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookStore.DataAccess.EntityFramework.Entities.User", "User")
                        .WithMany("UserBasket")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.DataAccess.EntityFramework.Entities.GenreBook", b =>
                {
                    b.HasOne("BookStore.DataAccess.EntityFramework.Entities.Book", "Book")
                        .WithMany("GenreBook")
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookStore.DataAccess.EntityFramework.Entities.Genre", "Genre")
                        .WithMany("GenreBook")
                        .HasForeignKey("GenreID")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("BookStore.DataAccess.EntityFramework.Entities.UserBook", b =>
                {
                    b.HasOne("BookStore.DataAccess.EntityFramework.Entities.Book", "Book")
                        .WithMany()
                        .HasForeignKey("BookID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("BookStore.DataAccess.EntityFramework.Entities.User", "User")
                        .WithMany("UserBook")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
